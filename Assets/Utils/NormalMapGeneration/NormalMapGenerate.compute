#pragma kernel CSMain

// Input and output textures
Texture2D<float4> _sourceTex;
Texture2D<float4> _heightMapTex;
RWTexture2D<float4> _resultTex;

float _normalStrength;
float _bumpStrength;
int _bumpBlur;
int _softenBump;

[numthreads(32, 32, 1)]
void CSMain (uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint2 texSize;
    _sourceTex.GetDimensions(texSize.x, texSize.y);

    if (dispatchThreadID.x >= texSize.x - 1) return;
    if (dispatchThreadID.x < 0) return;
    if (dispatchThreadID.y >= texSize.y - 1) return;
    if (dispatchThreadID.y < 0) return;


    // Bump generation -----------------------------------------------------------------------------
    uint2 coords = uint2(dispatchThreadID.x, dispatchThreadID.y);

    float4 heightPixel = _heightMapTex[coords];
    float4 leftHeightPixel = _heightMapTex[coords + uint2(-1, 0)];
    float4 rightHeightPixel = _heightMapTex[coords + uint2(1, 0)];
    float4 downHeightPixel = _heightMapTex[coords + uint2(0, -1)];
    float4 upHeightPixel = _heightMapTex[coords + uint2(0, 1)];

    float heightCurr = heightPixel.r;
    float heightL = 1 - leftHeightPixel.r;
    float heightR = 1 - rightHeightPixel.r;
    float heightD = 1 - downHeightPixel.r;
    float heightU = 1 - upHeightPixel.r;

    // Compute gradients (normal)
    float distanceX = (heightL - heightR) * _bumpStrength;
    float distanceY = (heightD - heightU) * _bumpStrength;

    distanceX *= pow(abs(heightCurr), _softenBump);
    distanceY *= pow(abs(heightCurr), _softenBump);


    // Emboss generation -----------------------------------------------------------------------------
    float4 blurPixel = _sourceTex[coords];
    float4 leftBlurPixel = _sourceTex[coords + uint2(-1, 0)];
    float4 rightBlurPixel = _sourceTex[coords + uint2(1, 0)];
    float4 downBlurPixel = _sourceTex[coords + uint2(0, -1)];
    float4 upBlurPixel = _sourceTex[coords + uint2(0, 1)];

    float blurCurr = 1 - (blurPixel.r + blurPixel.g + blurPixel.b) / 3.0 * blurPixel.a;
    float blurL = 1 - (leftBlurPixel.r + leftBlurPixel.g + leftBlurPixel.b) / 3.0 * leftBlurPixel.a;
    float blurR = 1 - (rightBlurPixel.r + rightBlurPixel.g + rightBlurPixel.b) / 3.0 * rightBlurPixel.a;
    float blurD = 1 - (downBlurPixel.r + downBlurPixel.g + downBlurPixel.b) / 3.0 * downBlurPixel.a;
    float blurU = 1 - (upBlurPixel.r + upBlurPixel.g + upBlurPixel.b) / 3.0 * upBlurPixel.a;

    // Compute gradients (normal)
    float embossX = (blurR - blurL) * blurCurr * _normalStrength;
    float embossY = (blurU - blurD) * blurCurr * _normalStrength;



    // Final normal generation -----------------------------------------------------------------------------
    float normalR = embossX * 3.0/2.0 + distanceX * 3.0/2.0;
    float normalG = embossY * 3.0/2.0 + distanceY * 3.0/2.0;
    float normalB = 1.0;

    float3 normal = normalize(float3(normalR, normalG, normalB));

    float4 normalColor = float4(
        normal.x * 0.5 + 0.5,
        normal.y * 0.5 + 0.5,
        normal.z * 0.5 + 0.5, 1);

    if (blurPixel.a < 0.1f) normalColor = float4(0.5, 0.5, 1, 0);

    // Output the final pixel
    _resultTex[coords] = normalColor;
}
