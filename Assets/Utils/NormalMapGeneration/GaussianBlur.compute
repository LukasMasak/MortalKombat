#pragma kernel CSMain

// Input and output textures
Texture2D<float4> _sourceTex;
RWTexture2D<float4> _resultTex;
Buffer<float> _gaussianKernel;

uint _blurRadius;

[numthreads(32, 32, 1)]
void CSMain (uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint2 texSize;
    _sourceTex.GetDimensions(texSize.x, texSize.y);

    if (dispatchThreadID.x >= texSize.x) return;
    if (dispatchThreadID.x < 0) return;
    if (dispatchThreadID.y >= texSize.y) return;
    if (dispatchThreadID.y < 0) return;

    float3 color = float3(0, 0, 0);
    float weightSum = 0.0;
    uint halfRadius = _blurRadius / 2;

    for (uint y = 0; y <= _blurRadius; y++)
    {
        for (uint x = 0; x <= _blurRadius; x++)
        {
            uint2 texCoord = uint2(dispatchThreadID.x + x - halfRadius, dispatchThreadID.y + y - halfRadius);

            texCoord.x = min(max(texCoord.x, 0), texSize.x - 1);
            texCoord.y = min(max(texCoord.y, 0), texSize.y - 1);

            float3 sample = _sourceTex[texCoord].xyz;

            float weight = _gaussianKernel[y * _blurRadius + x];

            color += sample * weight;
            weightSum += weight;
        }
    }

    color = color / weightSum;

    // Output the final pixel
    float4 finalPixel = float4(color, _sourceTex[dispatchThreadID.xy].w);
    _resultTex[dispatchThreadID.xy] = pow(abs(finalPixel), 0.449);
}
